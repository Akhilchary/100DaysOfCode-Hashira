program 1:
https://leetcode.com/problems/distinct-subsequences/

class Solution {
public:
    int rec(int i,int j,string s,string t,vector<vector<int>> &dp)
    {
        //base case
        if(i==-1)
        {
            if(j==-1) return 1;
            else return 0;
        }
        if(j==-1) return 1;
        if(dp[i][j]!=-1) return dp[i][j];
        if(s[i]==t[j])
        {
            return dp[i][j]= rec(i-1,j-1,s,t,dp)+rec(i-1,j,s,t,dp);
        }
        else return dp[i][j]= rec(i-1,j,s,t,dp);
             
    }
    int numDistinct(string s, string t) {
        int n=s.size(),m=t.size();
        int mod=1e9+7;
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        dp[0][0]=1;
        for(int i=0;i<=n;i++) dp[i][0]=1;
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(s[i-1]==t[j-1])
                {
                    dp[i][j]=(dp[i-1][j-1]+dp[i-1][j])%mod;
                }
                else dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][m];
    }
};

program 2:
https://leetcode.com/problems/spiral-matrix/
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& mat) {
        int m=mat.size(),n=mat[0].size();
        int k=0,l=0;
        vector<int> v;
        while(l<n && k<m)
        {
            for(int i=l;i<n;i++)
            {
                v.push_back(mat[k][i]);
            }
            k++;
            for(int i=k;i<m;i++)
            {
                v.push_back(mat[i][n-1]);
            }
            n--;
            if(k<m)
            {
                for(int i=n-1;i>=l;i--)
                {
                    v.push_back(mat[m-1][i]);
                }
                m--;
            }
            if(l<n)
            {
                for(int i=m-1;i>=k;i--)
                {
                    v.push_back(mat[i][l]);
                }
                l++;
            }
        }
        return v;
    }
};

program 3:
https://leetcode.com/problems/reordered-power-of-2/
class Solution {
public:
    bool reorderedPowerOf2(int n) {
        unordered_map<string,int> mp;
        for(int i=0;i<=30;i++)
        {
            string y=to_string((int)pow(2,i));
            // cout<<y<<endl;
            sort(y.begin(),y.end());
            
            mp[y]++;
        }
        string s=to_string(n);
        sort(s.begin(),s.end());
        // cout<<mp[s]<<" "<<s<<endl;
        if(mp.find(s)!=mp.end()) return true;
        return false;
    }
};