program 1:
https://leetcode.com/problems/longest-increasing-subsequence/
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> tmp;
        tmp.push_back(nums[0]);
        for(int i=1;i<n;i++)
        {
            if(nums[i]>tmp.back())
            {
                tmp.push_back(nums[i]);
            }
            else
            {
                int j=lower_bound(tmp.begin(),tmp.end(),nums[i])-tmp.begin();
                tmp[j]=nums[i];
            }
        }
        return tmp.size();
    }
};

program 2:
https://leetcode.com/problems/largest-divisible-subset/
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,1),hash(n,0);
        sort(nums.begin(),nums.end());
        hash[0]=0;
        int idx=0,mx=-1;
        for(int i=0;i<n;i++)
        {
            hash[i]=i;
            for(int prev=0;prev<i;prev++)
            {
                if(nums[i]%nums[prev]==0 || nums[prev]%nums[i]==0)
                {
                    if(1+dp[prev]>dp[i])
                    {
                        dp[i]=1+dp[prev];
                        hash[i]=prev;
                    }
                }
            }
            if(dp[i]>mx)
            {
                mx=dp[i];idx=i;
            }
        }
        vector<int> res;
        res.push_back(nums[idx]);
        while(idx!=hash[idx])
        {
            idx=hash[idx];
            res.push_back(nums[idx]);
            
        }
        return res;
            
    }
};