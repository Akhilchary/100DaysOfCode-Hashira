program 1:
https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/

class Solution {
public:
    int mod=1e9+7;
    int rec(int n,int k,int tar,vector<vector<int>> &dp)
    {
        if(n==0)
        {
            if(tar==0) return 1; 
            return 0;
        }
        if(dp[n][tar]!=-1) return dp[n][tar];
        int l=0;
        for(int i=1;i<=k;i++)
        {
            if(tar-i>=0)
                l=(l+rec(n-1,k,tar-i,dp))%mod;
        }
        return dp[n][tar]=l;
    }
    int numRollsToTarget(int n, int k, int target) {
        vector<vector<int>> dp(2000,vector<int>(2000,0));
        // return rec(n,k,target,dp);
        dp[0][0]=1;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=target;j++)
            {
                int x=0;
                for(int l=1;l<=k;l++)
                {
                    if(j-l>=0)
                        x=(x+dp[i-1][j-l])%mod;
                }
                dp[i][j]=x;
            }
        }
        return dp[n][target];
    }
};

program 2
https://leetcode.com/problems/linked-list-random-node/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int n=0;
    ListNode* h;
    Solution(ListNode* head) {
        h=head;
        while(head!=NULL)
        {
            head=head->next;
            n++;
        }
    }
    
    int getRandom() {
        int i=rand()%n;
        ListNode* p=h;
        while(i--)
        {
            p=p->next;
        }
        return p->val;
            
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(head);
 * int param_1 = obj->getRandom();
 */


 
program 3:
https://leetcode.com/problems/subarray-sums-divisible-by-k/
class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        int cnt=0,sm=0;
        int n=nums.size();
        mp[0]=1;
        for(int i=0;i<n;i++)
        {
            sm+=nums[i];
            while(sm<0) sm+=k;
            mp[sm%k]++;
        }
        for(auto i:mp)
        {
            if(i.second>1)
                cnt+=i.second*(i.second-1)/2;
        }
        return cnt;
    }
};