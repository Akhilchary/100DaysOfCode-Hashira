program 1:
https://leetcode.com/problems/valid-triangle-number/
class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        int n=nums.size();
        if(n==1) return 0;
        sort(nums.begin(),nums.end());
        // cout<<nums[0]<<" "<<nums[1]<<endl;
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                auto ind=lower_bound(nums.begin()+j+1,nums.end(),nums[i]+nums[j])-nums.begin()-1;
                cnt+=ind-j;
            }
        }
        if(cnt<0) return 0;
        return cnt;
    }
};

program 2:
https://leetcode.com/problems/generate-parentheses/
class Solution {
public:
    void rec(int open,int close,int n,vector<string> &res,string s)
    {
        if(close>open) return ;
        if(open==n && close==n){ res.push_back(s);return ;}
        if(open<n) rec(open+1,close,n,res,s+'(');
        if(close<n) rec(open,close+1,n,res,s+')');
    }
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        rec(0,0,n,res,"");
        return res;
    }
};

program 3:
https://leetcode.com/problems/peak-index-in-a-mountain-array/
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int n=arr.size();
        int l=0,r=n-1;
        while(l<r)
        {
            int mid=l+(r-l)/2;
            if(arr[mid]>arr[mid+1] && arr[mid]>arr[mid-1])
            {
                return mid;
            }
            else if(arr[mid]>arr[mid+1])
            {
                r=mid-1;
            }
            else
            {
                l=mid+1;
            }
        }
        return l;
    }
};