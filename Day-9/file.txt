program 1:
https://leetcode.com/contest/weekly-contest-307/problems/largest-palindromic-number/

class Solution {
public:
    string largestPalindromic(string num) {
        unordered_map<char,int> mp;
        int n=num.size();
        sort(num.begin(),num.end());
        string res="";
        char f='$';
        for(auto i:num) mp[i]++;
        // cout<<num<<endl;
        int z=0;
        for(int i=n-1;i>=0;i--)
        {
            if(mp[num[i]]==1 && f=='$')
            {
                f=num[i];
            }
            else if(mp[num[i]]>1)
            {
                int x=mp[num[i]]/2;
                while(num[i]!='0' && x-- )
                {
                    res+=num[i];
                }
                if(num[i]=='0') z=x;
                if(mp[num[i]]%2==0) mp.erase(num[i]);
                else mp[num[i]]=1;
            }
            // cout<<f<<endl;
        }
        if(z>0 && res.size()>0)
        {
            while(z--){res+='0';}
            
        }
        
        cout<<res<<" "<<f<<endl;
        sort(res.begin(),res.end());
        reverse(res.begin(),res.end());
        string s=res;
        reverse(s.begin(),s.end());
        string fin;
        if(f=='$') fin=res+s;
        else fin=res+f+s;
        cout<<fin<<" fin "<<endl;
        if(fin.size()==0 && z>1) return "0";
        return fin;
    }
};

program 2:
https://leetcode.com/contest/weekly-contest-307/problems/minimum-hours-of-training-to-win-a-competition/
class Solution {
public:
    int minNumberOfHours(int en, int ex, vector<int>& energy, vector<int>& experience) {
        int cnt=0;
        cout<<"en cnt i "<<endl;
        for(auto i:energy)
        {
            
            if(en<=i)
            {
                cnt+=i-en+1;
                en=1;
                
            }
            else{
                en=en-i;
            }
            cout<<en<<" "<<cnt<<" "<<i<<endl;
        }
        cout<<cnt<<endl;
        for(auto i:experience)
        {
            if(ex>i)
            {
                ex+=i;
            }
            else{
                cnt+=i-ex+1;
                ex=i+1+i;
            }
        }
        return cnt;
    }
};

program 3:
https://leetcode.com/problems/maximum-length-of-pair-chain/

class Solution {
public:
    static bool cmp(vector<int> &v1,vector<int> &v2)
    {
        if(v1[1]<v2[1]) return true;
        return false;
    }
    int findLongestChain(vector<vector<int>>& pairs) {
        sort(pairs.begin(),pairs.end(),cmp);
        int n=pairs.size();
        int cnt=1;
        int mr=pairs[0][1];
        for(int i=1;i<n;i++)
        {
            if(mr<pairs[i][0])
            {
                cnt++;mr=pairs[i][1];
            }
        }
        return cnt;
            
    }
};

program 4:
https://leetcode.com/problems/fair-distribution-of-cookies/

class Solution {
public:
    int mn=1e8;
    void rec(int i,vector<int> &arr,int k,vector<int> &v,int m)
    {
        if(i==arr.size())
        {
            mn=min(mn,m);
            return ;
        }
        
        for(int j=0;j<k;j++)
        {
            v[j]+=arr[i];
            rec(i+1,arr,k,v,max(m,v[j]));
            v[j]-=arr[i];
        }
    }
    int distributeCookies(vector<int>& arr, int k) {
        int n=arr.size();
        vector<int> v(k,0);
        rec(0,arr,k,v,-1);
        return mn;
    }
};

program 5:
https://leetcode.com/problems/longest-common-subsequence/

class Solution {
public:
    int rec(int i,int j,string s1,string s2,vector<vector<int>> &dp)
    {
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(s1[i]==s2[j])
        {
            return dp[i][j]=1+rec(i-1,j-1,s1,s2,dp);
        }
        return dp[i][j]=max(rec(i-1,j,s1,s2,dp),rec(i,j-1,s1,s2,dp));
    }
    int longestCommonSubsequence(string s1, string s2) {
        int n=s1.size();
        int m=s2.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        return rec(n-1,m-1,s1,s2,dp);
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(s1[i-1]==s2[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
};