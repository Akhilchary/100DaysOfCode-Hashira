program 1:
https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/
class Solution {
public:
    bool check(vector<int> &nums,int mid,int m,int k)
    {
        
        int n=nums.size();
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            if(mid>=nums[i])
            {
                cnt++;
            }
            else cnt=0;
            if(cnt==k)
            {
                m--;
                cnt=0;
            }
        }
        // cout<<mid<<" "<<m<<endl;
        if(m<=0) return true;
        return false;
    }
    int minDays(vector<int>& nums, int m, int k) {
        int n=nums.size();
        int l=0,r=1e9,lb=-1;
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(check(nums,mid,m,k))
            {
                lb=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        return lb;
    }
};

program 2:
https://leetcode.com/problems/maximum-candies-allocated-to-k-children/
class Solution {
public:
    bool check(vector<int> &nums,int mid,long long k)
    {
        int l=0,n=nums.size();
        long long p=0;
        while(l<n && k>0)
        {
            if(nums[l]>=mid)
            {
                if((nums[l]-mid)>=mid) p+=(nums[l]-mid)/mid;
                k--;
            }
            l++;
        }
        if(k==0 || p>=k) return true;
        return false;
    }
    int maximumCandies(vector<int>& nums, long long k) {
        int n=nums.size();
        int l=1,r=1e7;
        int ub=0;
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(check(nums,mid,k))
            {
                ub=mid;l=mid+1;
            }
            else r=mid-1;
        }
        return ub;
    }
};

program 3:
https://leetcode.com/problems/search-a-2d-matrix-ii/
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& mat, int t) {
        int n=mat.size(),m=mat[0].size();
        if(n<1 || m<1) return false;
        int r=0,c=m-1;
        while(r<n && c>=0)
        {
            if(mat[r][c]==t) return true;
            else if(mat[r][c]>t)
            {
                c--;
            }
            else r++;
        }
        return false;
        
    }
};

program 4:
https://leetcode.com/problems/h-index-ii/
class Solution {
public:
    int hIndex(vector<int>& nums) {
        int n=nums.size();
        int l=0,r=n-1,lb=0;
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(nums[mid]==(n-mid))
            {
                return nums[mid];
            }
            else if(nums[mid]>(n-mid)) r=mid-1;
            else  l=mid+1;
            
        }
        return n-(r+1);
    }
};